{"version":3,"sources":["index.js"],"names":["App","_this","Object","C_Users_Admin_Desktop_NodeJS_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_Admin_Desktop_NodeJS_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Admin_Desktop_NodeJS_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","data","pages","markers","loading","prefix","fetchData","listBlobs","bind","C_Users_Admin_Desktop_NodeJS_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","instance","_this2","setState","anonymousCredential","AnonymousCredential","pipeline","StorageURL","newPipeline","serviceURL","ServiceURL","concat","containerURL","ContainerURL","fromServiceURL","URLSearchParams","window","location","search","get","listBlobHierarchySegment","Aborter","none","page","maxresults","pageSize","then","res","slice","totalPages","nextMarker","Array","prototype","push","apply","segment","blobItems","blobPrefixes","sortedData","_","orderBy","sorted","map","sort","row","id","Infinity","undefined","properties","toLowerCase","d","desc","i","length","name","splice","blobName","link","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","href","_this3","_this$state","dataset","react_table__WEBPACK_IMPORTED_MODULE_10__","columns","Header","accessor","Cell","renderLink","value","lastModified","toISOString","maxWidth","contentLength","manual","onFetchData","defaultPageSize","className","React","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8237909.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport _ from \"lodash\";\nimport \"./index.css\";\n\n// This sample uses React Table\n// Check it out at https://react-table.js.org/#/story/readme\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\n// Import Azure Storage Blob SDK\nimport {\n  Aborter,\n  ServiceURL,\n  ContainerURL,\n  StorageURL,\n  AnonymousCredential\n} from \"@azure/storage-blob\";\n\n// Account name, and the container to list from\nconst account = \"mscssstatic\";\nconst container = \"staticwebsite\";\nconst linkforaccount = \"https://mscssstatic.blob.core.windows.net/staticwebsite\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pages: 5,\n      markers: [],\n      loading: true,\n      prefix: \"\"\n    };\n    this.fetchData = this.listBlobs.bind(this);\n  }\n\n  listBlobs(state, instance) {\n    // this lists Blobs in pages defined in state.pageSize\n    this.setState({ loading: true });\n\n    // Use AnonymousCredential since $web container is made a 'public container'\n    // and does not require authorization\n    const anonymousCredential = new AnonymousCredential();\n\n    const pipeline = StorageURL.newPipeline(anonymousCredential);\n\n    const serviceURL = new ServiceURL(\n      `https://${account}.blob.core.windows.net`,\n      pipeline\n    );\n    // If you are using a SAS token, simply append to ContainerURL here.\n    // We will use anonymous access hence no SAS token\n    const containerName = container; //+ `?st=2018-11-06T06%3A15%3A24Z&se=2019-11-07T06%3A15%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=4vCT7aInDWRiypkuYlezN8dos0K2h2DvQ0pnNkMJSFs%3D`;\n    const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\n\n    // Fetch the prefix in the query params to browse into folders\n    const urlParams = new URLSearchParams(window.location.search);\n    const prefix = urlParams.get(\"prefix\");\n\n    // List objects from Blob storage using the prefix\n    // Delimiter for virtual directories is a forward slash '/' here\n    containerURL\n      .listBlobHierarchySegment(Aborter.none, \"/\", state.markers[state.page], {\n        maxresults: state.pageSize,\n        prefix: prefix\n      })\n      .then(res => {\n        // Store the nextMarker in an array for prev/next buttons only if there are more blobs to show\n        const markers = state.markers.slice();\n        var totalPages = state.page + 1;\n        if (res.nextMarker) {\n          markers[state.page + 1] = res.nextMarker;\n          totalPages++;\n        }\n\n        // Combine the found virtual directories and files\n        Array.prototype.push.apply(\n          res.segment.blobItems,\n          res.segment.blobPrefixes\n        );\n\n        // This is to sort rows, and handles blobName, contentLength and lastModified time\n        const sortedData = _.orderBy(\n          res.segment.blobItems,\n          state.sorted.map(sort => {\n            return row => {\n              if (row[sort.id] === null) {\n                return -Infinity;\n              } // TODO: following is a workaround to special case contentLength and lastModified\n              else if (row[sort.id] === undefined) {\n                if (row.properties === undefined) {\n                  return -Infinity;\n                } else {\n                  return row.properties[sort.id];\n                }\n              }\n              return typeof row[sort.id] === \"string\"\n                ? row[sort.id].toLowerCase()\n                : row[sort.id];\n            };\n          }),\n          state.sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\n        );\n\n\n        // Add code to remove the project file in the index.html\n        for (var i =0; i < sortedData.length; i++ ) {\n          if (sortedData[i].name == \"asset-manifest.json\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"favicon.ico\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"index.html\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"manifest.json\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"precache-manifest.39cd5764c0479c84bddf55fe7233bdbf.js\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"service-worker.js\") sortedData.splice(i, 1);\n          if (sortedData[i].name == \"static/\") sortedData.splice(i, 1);               \n        }\n\n        var aaa = sortedData;\n        // Store the state\n        this.setState({\n          data: sortedData,\n          pages: totalPages,\n          markers: markers,\n          loading: false,\n          prefix: prefix\n        });\n      });\n  }\n\n  // Custom links for various scenarios (handles blobs, directories and go back link)\n  renderLink(blobName) {\n    var link = linkforaccount;\n    if (blobName === \"../\") { \n      link = \"/index.html\";//home\n    } else if (blobName.slice(-1) === \"/\") { \n      link = \"?prefix=\" + blobName;//folder\n    } else {\n      link += \"/\" + blobName; //file\n    }\n    return <a href={link}>{blobName}</a>;\n  }\n\n  render() {\n    const { data, pages, markers, loading, prefix } = this.state;\n\n    // If this is a directory view, add a go back link for the root\n    var dataset = data;\n    if (prefix !== null) {\n      dataset = [{ name: \"../\" }].concat(dataset);\n    }\n\n    return (\n      <div>\n        <ReactTable\n          columns={[\n            {\n              Header: \"Blob Name\",\n              id: \"name\",\n              accessor: \"name\",\n              Cell: row => this.renderLink(row.value)\n            },\n            {\n              Header: \"Last Modified\",\n              id: \"lastModified\",\n              accessor: d => {\n                if (typeof d.properties !== \"undefined\") {\n                  return d.properties.lastModified.toISOString();\n                }\n              },\n              maxWidth: 400\n            },\n            {\n              Header: \"Content Length\",\n              id: \"contentLength\",\n              accessor: d => {\n                if (typeof d.properties !== \"undefined\") {\n                  return d.properties.contentLength;\n                }\n              },\n              maxWidth: 200\n            }\n          ]}\n          manual // Do not paginate as we can only list objects in pages from Blob storage\n          data={dataset}\n          pages={pages}\n          markers={markers}\n          loading={loading}\n          onFetchData={this.fetchData}\n          defaultPageSize={10} // The site default page size, change if you have more files\n          className=\"-striped -highlight\"\n        />\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}