{"version":3,"sources":["index.js"],"names":["App","_this","Object","C_Users_PolRocaCugat_Documents_static_website_blob_browser_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_PolRocaCugat_Documents_static_website_blob_browser_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_PolRocaCugat_Documents_static_website_blob_browser_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","data","pages","markers","loading","prefix","fetchData","listBlobs","bind","C_Users_PolRocaCugat_Documents_static_website_blob_browser_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","instance","_this2","setState","anonymousCredential","AnonymousCredential","pipeline","StorageURL","newPipeline","serviceURL","ServiceURL","concat","containerURL","ContainerURL","fromServiceURL","URLSearchParams","window","location","search","get","listBlobHierarchySegment","Aborter","none","page","maxresults","pageSize","then","res","slice","totalPages","nextMarker","Array","prototype","push","apply","segment","blobItems","blobPrefixes","sortedData","_","orderBy","sorted","map","sort","row","id","Infinity","undefined","properties","toLowerCase","d","desc","blobName","link","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","href","_this3","_this$state","dataset","name","react_table__WEBPACK_IMPORTED_MODULE_10__","columns","Header","accessor","Cell","renderLink","value","lastModified","toISOString","maxWidth","contentLength","manual","onFetchData","defaultPageSize","className","React","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.249c768e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport _ from \"lodash\";\r\nimport \"./index.css\";\r\n\r\n// This sample uses React Table\r\n// Check it out at https://react-table.js.org/#/story/readme\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\n// Import Azure Storage Blob SDK\r\nimport { Aborter, ServiceURL, ContainerURL, StorageURL, AnonymousCredential } from \"@azure/storage-blob\";\r\n\r\n// Account name, and the container to list from\r\nconst account = 'peiphylib'\r\nconst container = 'files'\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [],\r\n            pages: 2,\r\n            markers: [],\r\n            loading: true,\r\n            prefix: \"\"\r\n        };\r\n        this.fetchData = this.listBlobs.bind(this);\r\n    }\r\n  \r\n    listBlobs(state, instance) {\r\n        // this lists Blobs in pages defined in state.pageSize\r\n        this.setState({ loading: true });\r\n    \r\n        // Use AnonymousCredential since $web container is made a 'public container' \r\n        // and does not require authorization\r\n        const anonymousCredential = new AnonymousCredential();\r\n        const pipeline = StorageURL.newPipeline(anonymousCredential);\r\n    \r\n        const serviceURL = new ServiceURL(\r\n            `https://${account}.blob.core.windows.net`,\r\n            pipeline\r\n        );\r\n    \r\n        // If you are using a SAS token, simply append to ContainerURL here. \r\n        // We will use anonymous access hence no SAS token\r\n        const containerName = container //+ `?st=2018-11-06T06%3A15%3A24Z&se=2019-11-07T06%3A15%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=4vCT7aInDWRiypkuYlezN8dos0K2h2DvQ0pnNkMJSFs%3D`;\r\n        const containerURL = ContainerURL.fromServiceURL(serviceURL, containerName);\r\n        \r\n        // Fetch the prefix in the query params to browse into folders\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const prefix = urlParams.get('prefix');\r\n\r\n        // List objects from Blob storage using the prefix\r\n        // Delimiter for virtual directories is a forward slash '/' here\r\n        containerURL.listBlobHierarchySegment (\r\n            Aborter.none,\r\n            \"/\",\r\n            state.markers[state.page],\r\n            {\r\n                maxresults: state.pageSize,\r\n                prefix: prefix\r\n            }\r\n        ).then(res => {\r\n            // Store the nextMarker in an array for prev/next buttons only if there are more blobs to show\r\n            const markers = state.markers.slice();\r\n            var totalPages = state.page+1;\r\n            if (res.nextMarker) {\r\n                markers[(state.page+1)] = res.nextMarker;\r\n                totalPages++;\r\n            }\r\n              \r\n            // Combine the found virtual directories and files\r\n            Array.prototype.push.apply(res.segment.blobItems, res.segment.blobPrefixes)\r\n\r\n            // This is to sort rows, and handles blobName, contentLength and lastModified time\r\n            const sortedData = _.orderBy(\r\n                res.segment.blobItems,\r\n                state.sorted.map(sort => {\r\n                    return row => {\r\n                        if (row[sort.id] === null) {\r\n                            return -Infinity;\r\n                        } // TODO: following is a workaround to special case contentLength and lastModified\r\n                        else if(row[sort.id] === undefined){\r\n                            if(row.properties === undefined)\r\n                            {\r\n                                return -Infinity;\r\n                            } else {\r\n                                return row.properties[sort.id];\r\n                            }\r\n                        }\r\n                        return typeof row[sort.id] === \"string\"\r\n                            ? row[sort.id].toLowerCase()\r\n                            : row[sort.id];\r\n                    };\r\n                }),\r\n                state.sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\r\n              );\r\n\r\n            // Store the state\r\n            this.setState({\r\n                data: sortedData,\r\n                pages: totalPages,\r\n                markers: markers,\r\n                loading: false,\r\n                prefix: prefix\r\n            });\r\n    });\r\n    }\r\n\r\n    // Custom links for various scenarios (handles blobs, directories and go back link)\r\n    renderLink(blobName) {\r\n        var link = \"https://peiphylib.blob.core.windows.net/files\";\r\n        if(blobName === \"../\")\r\n        {\r\n            link += \"/index.html\"\r\n        }\r\n        else if(blobName.slice(-1) === \"/\")\r\n        {\r\n            link = \"?prefix=\" + blobName\r\n        } else {\r\n            link += \"/\" + blobName\r\n        }\r\n        return (\r\n            <a href={link}>\r\n                {blobName}\r\n            </a>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { data, pages, markers, loading, prefix } = this.state;\r\n\r\n        // If this is a directory view, add a go back link for the root\r\n        var dataset = data\r\n        if(prefix !== null)\r\n        {\r\n            dataset = [{name: \"../\"}].concat(dataset);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <ReactTable\r\n                columns={[\r\n                {\r\n                    Header: \"Blob Name\",\r\n                    id: \"name\",\r\n                    accessor: \"name\",\r\n                    Cell: row => (\r\n                        this.renderLink(row.value)\r\n                    )\r\n                },\r\n                {\r\n                    Header: \"Last Modified\",\r\n                    id: \"lastModified\",\r\n                    accessor: (d) => {\r\n                        if(typeof d.properties !== \"undefined\" ){\r\n                            return d.properties.lastModified.toISOString()\r\n                        }\r\n                    },\r\n                    maxWidth: 400\r\n                },\r\n                {\r\n                    Header: \"Content Length\",\r\n                    id: \"contentLength\",\r\n                    accessor: (d) => {\r\n                        if(typeof d.properties !== \"undefined\"){\r\n                            return d.properties.contentLength\r\n                        }\r\n                    },\r\n                    maxWidth: 200\r\n                }\r\n            ]}\r\n            manual // Do not paginate as we can only list objects in pages from Blob storage\r\n            data={dataset}\r\n            pages={pages} \r\n            markers={markers}\r\n            loading={loading} \r\n            onFetchData={this.fetchData} \r\n            defaultPageSize={10}\r\n            className=\"-striped -highlight\"\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}